---
source: varnish-macros/src/tests.rs
snapshot_kind: text
---
VmodInfo {
    params: VmodParams {
        docs: None,
    },
    ident: "types",
    docs: "main docs\n# Big header\n## sub header\nfoo bar\nMultiline\n* comment per https://github.com/rust-lang/rust/issues/32088\n*\n* The end",
    funcs: [
        FuncInfo {
            func_type: Function,
            ident: "with_docs",
            docs: "doctest on a function\nwith multiple lines\n# Big header\n## sub header\n* foo\n* bar",
            has_optional_args: false,
            args: [],
            returns: Value(
                Default,
            ),
        },
        FuncInfo {
            func_type: Function,
            ident: "no_docs",
            docs: "",
            has_optional_args: false,
            args: [],
            returns: Value(
                Default,
            ),
        },
        FuncInfo {
            func_type: Function,
            ident: "doctest",
            docs: "doctest on a function",
            has_optional_args: false,
            args: [
                ParamTypeInfo {
                    ident: "_no_docs",
                    docs: "",
                    idx: 0,
                    ty: Value(
                        ParamInfo {
                            kind: Regular,
                            default: Null,
                            ty_info: I64,
                        },
                    ),
                },
                ParamTypeInfo {
                    ident: "_v",
                    docs: "doc comment on *function arguments* are invalid in Rust,\nbut they are parsed by macros.\nwe can generate documentation for param `_v` here.\n\n## Example\nThis comment is multi-lined to ensure multiple `#[doc]` are parsed correctly.",
                    idx: 1,
                    ty: Value(
                        ParamInfo {
                            kind: Regular,
                            default: Null,
                            ty_info: I64,
                        },
                    ),
                },
            ],
            returns: Value(
                Default,
            ),
        },
        FuncInfo {
            func_type: Function,
            ident: "arg_only",
            docs: "",
            has_optional_args: false,
            args: [
                ParamTypeInfo {
                    ident: "_v",
                    docs: "doc comment for `arg_only`",
                    idx: 0,
                    ty: Value(
                        ParamInfo {
                            kind: Regular,
                            default: Null,
                            ty_info: I64,
                        },
                    ),
                },
            ],
            returns: Value(
                Default,
            ),
        },
    ],
    objects: [
        ObjInfo {
            ident: "DocStruct",
            docs: "doctest for `DocStruct` implementation",
            constructor: FuncInfo {
                func_type: Constructor,
                ident: "new",
                docs: "doctest for `new`",
                has_optional_args: true,
                args: [
                    ParamTypeInfo {
                        ident: "cap",
                        docs: "doc comment for `cap`",
                        idx: 0,
                        ty: Value(
                            ParamInfo {
                                kind: Optional,
                                default: Null,
                                ty_info: I64,
                            },
                        ),
                    },
                ],
                returns: Value(
                    SelfType,
                ),
            },
            destructor: FuncInfo {
                func_type: Destructor,
                ident: "_fini",
                docs: "",
                has_optional_args: false,
                args: [],
                returns: Value(
                    Default,
                ),
            },
            funcs: [
                FuncInfo {
                    func_type: Method,
                    ident: "function",
                    docs: "doctest for the object function",
                    has_optional_args: false,
                    args: [
                        ParamTypeInfo {
                            ident: "self",
                            docs: "self docs - note that `rustfmt` will put `&self` right after this comment\non the same line, effectively removing the code!\nWe cannot really document it anyway, so we parse it but skip it later.",
                            idx: 0,
                            ty: SelfType,
                        },
                        ParamTypeInfo {
                            ident: "key",
                            docs: "param docs",
                            idx: 1,
                            ty: Value(
                                ParamInfo {
                                    kind: Regular,
                                    default: Null,
                                    ty_info: Str,
                                },
                            ),
                        },
                    ],
                    returns: Value(
                        Default,
                    ),
                },
            ],
        },
    ],
    shared_types: SharedTypes {
        shared_per_task_ty: None,
        shared_per_vcl_ty: None,
    },
}
