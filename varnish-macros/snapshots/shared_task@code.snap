---
source: varnish-macros/src/tests.rs
---
mod task {
    #[allow(non_snake_case, unused_imports, unused_qualifications, unused_variables)]
    mod varnish_generated {
        use std::borrow::Cow;
        use std::ffi::{c_char, c_int, c_uint, c_void, CStr};
        use std::ptr::null;
        use varnish::ffi::{
            VCL_BACKEND, VCL_BOOL, VCL_DURATION, VCL_INT, VCL_IP, VCL_PROBE, VCL_REAL,
            VCL_STRING, VCL_VOID, VMOD_ABI_Version, VMOD_PRIV_METHODS_MAGIC, VclEvent,
            vmod_priv, vmod_priv_methods, vrt_ctx,
        };
        use varnish::vcl::{Ctx, IntoVCL};
        use super::*;
        static PRIV_TASK_METHODS: vmod_priv_methods = vmod_priv_methods {
            magic: VMOD_PRIV_METHODS_MAGIC,
            type_: c"PerTask".as_ptr(),
            fini: Some(vmod_priv::on_fini::<PerTask>),
        };
        static PRIV_VCL_METHODS: vmod_priv_methods = vmod_priv_methods {
            magic: VMOD_PRIV_METHODS_MAGIC,
            type_: c"PerVcl".as_ptr(),
            fini: Some(vmod_priv::on_fini::<PerVcl>),
        };
        unsafe extern "C" fn vmod_c_on_event(
            __ctx: *mut vrt_ctx,
            __vp: *mut vmod_priv,
            __ev: VclEvent,
        ) -> VCL_INT {
            let mut __ctx = Ctx::from_ptr(__ctx);
            let mut __var2 = (*__vp).take();
            let __result = super::on_event(__ev, &mut __ctx, &mut __var2);
            if let Some(obj) = __var2 {
                (*__vp).put(obj, &PRIV_VCL_METHODS);
            }
            VCL_INT(0)
        }
        unsafe extern "C" fn vmod_c_per_vcl_val(
            __ctx: *mut vrt_ctx,
            vcl: *const vmod_priv,
        ) {
            let mut __ctx = Ctx::from_ptr(__ctx);
            let __var0 = vcl.as_ref().and_then(|v| v.get_ref());
            let __result = super::per_vcl_val(__var0);
        }
        #[repr(C)]
        struct arg_vmod_task_per_vcl_opt {
            vcl: *const vmod_priv,
            valid_op: c_char,
            op: VCL_INT,
        }
        unsafe extern "C" fn vmod_c_per_vcl_opt(
            __ctx: *mut vrt_ctx,
            __args: *const arg_vmod_task_per_vcl_opt,
        ) {
            let mut __ctx = Ctx::from_ptr(__ctx);
            let __args = __args.as_ref().unwrap();
            let __var0 = __args.vcl.as_ref().and_then(|v| v.get_ref());
            let __var1: Option<i64> = if __args.valid_op != 0 {
                Some(__args.op.into())
            } else {
                None
            };
            let __result = super::per_vcl_opt(__var0, __var1);
        }
        unsafe extern "C" fn vmod_c_per_tsk_val(
            __ctx: *mut vrt_ctx,
            tsk: *mut vmod_priv,
        ) {
            let mut __ctx = Ctx::from_ptr(__ctx);
            let mut __var0 = (*tsk).take();
            let __result = super::per_tsk_val(&mut __var0);
            if let Some(obj) = __var0 {
                (*tsk).put(obj, &PRIV_TASK_METHODS);
            }
        }
        #[repr(C)]
        struct arg_vmod_task_per_tsk_opt {
            tsk: *mut vmod_priv,
            valid_op: c_char,
            op: VCL_INT,
        }
        unsafe extern "C" fn vmod_c_per_tsk_opt(
            __ctx: *mut vrt_ctx,
            __args: *const arg_vmod_task_per_tsk_opt,
        ) {
            let mut __ctx = Ctx::from_ptr(__ctx);
            let __args = __args.as_ref().unwrap();
            let mut __var0 = (*__args.tsk).take();
            let __var1: Option<i64> = if __args.valid_op != 0 {
                Some(__args.op.into())
            } else {
                None
            };
            let __result = super::per_tsk_opt(&mut __var0, __var1);
            if let Some(obj) = __var0 {
                (*__args.tsk).put(obj, &PRIV_TASK_METHODS);
            }
        }
        unsafe extern "C" fn vmod_c_PerVcl__init(
            __ctx: *mut vrt_ctx,
            __objp: *mut *mut PerVcl,
            __vcl_name: *const c_char,
            vcl: *mut vmod_priv,
        ) {
            let mut __ctx = Ctx::from_ptr(__ctx);
            let mut __var0 = (*vcl).take();
            let __result = super::PerVcl::new(&mut __var0);
            if let Some(obj) = __var0 {
                (*vcl).put(obj, &PRIV_VCL_METHODS);
            }
            let __result = Box::new(__result);
            *__objp = Box::into_raw(__result);
        }
        unsafe extern "C" fn vmod_c_PerVcl__fini(__objp: *mut *mut PerVcl) {
            drop(Box::from_raw(*__objp));
            *__objp = ::std::ptr::null_mut();
        }
        unsafe extern "C" fn vmod_c_PerVcl_both(
            __ctx: *mut vrt_ctx,
            __obj: *const super::PerVcl,
            tsk: *mut vmod_priv,
            vcl: *const vmod_priv,
        ) {
            let mut __ctx = Ctx::from_ptr(__ctx);
            let __obj = __obj.as_ref().unwrap();
            let mut __var1 = (*tsk).take();
            let __var2 = vcl.as_ref().and_then(|v| v.get_ref());
            let __result = __obj.both(&mut __var1, __var2);
            if let Some(obj) = __var1 {
                (*tsk).put(obj, &PRIV_TASK_METHODS);
            }
        }
        unsafe extern "C" fn vmod_c_PerVcl_both_pos(
            __ctx: *mut vrt_ctx,
            __obj: *const super::PerVcl,
            tsk: *mut vmod_priv,
            vcl: *const vmod_priv,
            val: VCL_INT,
        ) {
            let mut __ctx = Ctx::from_ptr(__ctx);
            let __obj = __obj.as_ref().unwrap();
            let mut __var1 = (*tsk).take();
            let __var2 = vcl.as_ref().and_then(|v| v.get_ref());
            let __var3: i64 = val.into();
            let __result = __obj.both_pos(&mut __var1, __var2, __var3);
            if let Some(obj) = __var1 {
                (*tsk).put(obj, &PRIV_TASK_METHODS);
            }
        }
        #[repr(C)]
        struct arg_vmod_task_PerVcl_both_opt {
            tsk: *mut vmod_priv,
            vcl: *const vmod_priv,
            valid_opt: c_char,
            opt: VCL_INT,
        }
        unsafe extern "C" fn vmod_c_PerVcl_both_opt(
            __ctx: *mut vrt_ctx,
            __obj: *const super::PerVcl,
            __args: *const arg_vmod_task_PerVcl_both_opt,
        ) {
            let mut __ctx = Ctx::from_ptr(__ctx);
            let __args = __args.as_ref().unwrap();
            let __obj = __obj.as_ref().unwrap();
            let mut __var1 = (*__args.tsk).take();
            let __var2 = __args.vcl.as_ref().and_then(|v| v.get_ref());
            let __var3: Option<i64> = if __args.valid_opt != 0 {
                Some(__args.opt.into())
            } else {
                None
            };
            let __result = __obj.both_opt(&mut __var1, __var2, __var3);
            if let Some(obj) = __var1 {
                (*__args.tsk).put(obj, &PRIV_TASK_METHODS);
            }
        }
        #[repr(C)]
        pub struct VmodExports {
            vmod_c_on_event: Option<
                unsafe extern "C" fn(
                    __ctx: *mut vrt_ctx,
                    __vp: *mut vmod_priv,
                    __ev: VclEvent,
                ) -> VCL_INT,
            >,
            vmod_c_per_vcl_val: Option<
                unsafe extern "C" fn(__ctx: *mut vrt_ctx, vcl: *const vmod_priv),
            >,
            vmod_c_per_vcl_opt: Option<
                unsafe extern "C" fn(
                    __ctx: *mut vrt_ctx,
                    __args: *const arg_vmod_task_per_vcl_opt,
                ),
            >,
            vmod_c_per_tsk_val: Option<
                unsafe extern "C" fn(__ctx: *mut vrt_ctx, tsk: *mut vmod_priv),
            >,
            vmod_c_per_tsk_opt: Option<
                unsafe extern "C" fn(
                    __ctx: *mut vrt_ctx,
                    __args: *const arg_vmod_task_per_tsk_opt,
                ),
            >,
            vmod_c_PerVcl__init: Option<
                unsafe extern "C" fn(
                    __ctx: *mut vrt_ctx,
                    __objp: *mut *mut PerVcl,
                    __vcl_name: *const c_char,
                    vcl: *mut vmod_priv,
                ),
            >,
            vmod_c_PerVcl__fini: Option<unsafe extern "C" fn(__objp: *mut *mut PerVcl)>,
            vmod_c_PerVcl_both: Option<
                unsafe extern "C" fn(
                    __ctx: *mut vrt_ctx,
                    __obj: *const super::PerVcl,
                    tsk: *mut vmod_priv,
                    vcl: *const vmod_priv,
                ),
            >,
            vmod_c_PerVcl_both_pos: Option<
                unsafe extern "C" fn(
                    __ctx: *mut vrt_ctx,
                    __obj: *const super::PerVcl,
                    tsk: *mut vmod_priv,
                    vcl: *const vmod_priv,
                    val: VCL_INT,
                ),
            >,
            vmod_c_PerVcl_both_opt: Option<
                unsafe extern "C" fn(
                    __ctx: *mut vrt_ctx,
                    __obj: *const super::PerVcl,
                    __args: *const arg_vmod_task_PerVcl_both_opt,
                ),
            >,
        }
        pub static VMOD_EXPORTS: VmodExports = VmodExports {
            vmod_c_on_event: Some(vmod_c_on_event),
            vmod_c_per_vcl_val: Some(vmod_c_per_vcl_val),
            vmod_c_per_vcl_opt: Some(vmod_c_per_vcl_opt),
            vmod_c_per_tsk_val: Some(vmod_c_per_tsk_val),
            vmod_c_per_tsk_opt: Some(vmod_c_per_tsk_opt),
            vmod_c_PerVcl__init: Some(vmod_c_PerVcl__init),
            vmod_c_PerVcl__fini: Some(vmod_c_PerVcl__fini),
            vmod_c_PerVcl_both: Some(vmod_c_PerVcl_both),
            vmod_c_PerVcl_both_pos: Some(vmod_c_PerVcl_both_pos),
            vmod_c_PerVcl_both_opt: Some(vmod_c_PerVcl_both_opt),
        };
        #[repr(C)]
        pub struct VmodData {
            vrt_major: c_uint,
            vrt_minor: c_uint,
            file_id: *const c_char,
            name: *const c_char,
            func_name: *const c_char,
            func: *const c_void,
            func_len: c_int,
            proto: *const c_char,
            json: *const c_char,
            abi: *const c_char,
        }
        unsafe impl Sync for VmodData {}
        #[allow(non_upper_case_globals)]
        #[no_mangle]
        pub static Vmod_task_Data: VmodData = VmodData {
            vrt_major: 0,
            vrt_minor: 0,
            file_id: c"1f02865752c3ac7d598523d9355cd4b1d939cf77eef9242842321ed2a2c26b06"
                .as_ptr(),
            name: c"task".as_ptr(),
            func_name: c"Vmod_vmod_task_Func".as_ptr(),
            func_len: size_of::<VmodExports>() as c_int,
            func: &VMOD_EXPORTS as *const _ as *const c_void,
            abi: VMOD_ABI_Version.as_ptr(),
            json: JSON.as_ptr(),
            proto: null(),
        };
        const JSON: &CStr = c"VMOD_JSON_SPEC\u{2}\n[\n  [\n    \"$VMOD\",\n    \"1.0\",\n    \"task\",\n    \"Vmod_vmod_task_Func\",\n    \"1f02865752c3ac7d598523d9355cd4b1d939cf77eef9242842321ed2a2c26b06\",\n    \"Varnish (version) (hash)\",\n    \"0\",\n    \"0\"\n  ],\n  [\n    \"$CPROTO\",\n    \"\\nstruct vmod_task_PerVcl;\\n\\ntypedef VCL_VOID td_vmod_task_per_vcl_val(\\n    VRT_CTX,\\n    struct vmod_priv *\\n);\\n\\nstruct arg_vmod_task_per_vcl_opt {\\n  struct vmod_priv * vcl;\\n  char valid_op;\\n  VCL_INT op;\\n};\\n\\ntypedef VCL_VOID td_vmod_task_per_vcl_opt(\\n    VRT_CTX,\\n    struct arg_vmod_task_per_vcl_opt *\\n);\\n\\ntypedef VCL_VOID td_vmod_task_per_tsk_val(\\n    VRT_CTX,\\n    struct vmod_priv *\\n);\\n\\nstruct arg_vmod_task_per_tsk_opt {\\n  struct vmod_priv * tsk;\\n  char valid_op;\\n  VCL_INT op;\\n};\\n\\ntypedef VCL_VOID td_vmod_task_per_tsk_opt(\\n    VRT_CTX,\\n    struct arg_vmod_task_per_tsk_opt *\\n);\\n\\ntypedef VCL_VOID td_vmod_task_PerVcl__init(\\n    VRT_CTX,\\n    struct vmod_task_PerVcl **,\\n    const char *,\\n    struct vmod_priv *\\n);\\n\\ntypedef VCL_VOID td_vmod_task_PerVcl__fini(\\n    struct vmod_task_PerVcl **\\n);\\n\\ntypedef VCL_VOID td_vmod_task_PerVcl_both(\\n    VRT_CTX,\\n    struct vmod_task_PerVcl *,\\n    struct vmod_priv *,\\n    struct vmod_priv *\\n);\\n\\ntypedef VCL_VOID td_vmod_task_PerVcl_both_pos(\\n    VRT_CTX,\\n    struct vmod_task_PerVcl *,\\n    struct vmod_priv *,\\n    struct vmod_priv *,\\n    VCL_INT\\n);\\n\\nstruct arg_vmod_task_PerVcl_both_opt {\\n  struct vmod_priv * tsk;\\n  struct vmod_priv * vcl;\\n  char valid_opt;\\n  VCL_INT opt;\\n};\\n\\ntypedef VCL_VOID td_vmod_task_PerVcl_both_opt(\\n    VRT_CTX,\\n    struct vmod_task_PerVcl *,\\n    struct arg_vmod_task_PerVcl_both_opt *\\n);\\n\\nstruct Vmod_vmod_task_Func {\\n  vmod_event_f *f_on_event;\\n  td_vmod_task_per_vcl_val *f_per_vcl_val;\\n  td_vmod_task_per_vcl_opt *f_per_vcl_opt;\\n  td_vmod_task_per_tsk_val *f_per_tsk_val;\\n  td_vmod_task_per_tsk_opt *f_per_tsk_opt;\\n  td_vmod_task_PerVcl__init *f_PerVcl__init;\\n  td_vmod_task_PerVcl__fini *f_PerVcl__fini;\\n  td_vmod_task_PerVcl_both *f_PerVcl_both;\\n  td_vmod_task_PerVcl_both_pos *f_PerVcl_both_pos;\\n  td_vmod_task_PerVcl_both_opt *f_PerVcl_both_opt;\\n};\\n\\nstatic struct Vmod_vmod_task_Func Vmod_vmod_task_Func;\"\n  ],\n  [\n    \"$EVENT\",\n    \"Vmod_vmod_task_Func.f_on_event\"\n  ],\n  [\n    \"$FUNC\",\n    \"per_vcl_val\",\n    [\n      [\n        \"VOID\"\n      ],\n      \"Vmod_vmod_task_Func.f_per_vcl_val\",\n      \"\",\n      [\n        \"PRIV_VCL\",\n        \"vcl\"\n      ]\n    ]\n  ],\n  [\n    \"$FUNC\",\n    \"per_vcl_opt\",\n    [\n      [\n        \"VOID\"\n      ],\n      \"Vmod_vmod_task_Func.f_per_vcl_opt\",\n      \"struct arg_vmod_task_per_vcl_opt\",\n      [\n        \"PRIV_VCL\",\n        \"vcl\"\n      ],\n      [\n        \"INT\",\n        \"op\",\n        null,\n        null,\n        true\n      ]\n    ]\n  ],\n  [\n    \"$FUNC\",\n    \"per_tsk_val\",\n    [\n      [\n        \"VOID\"\n      ],\n      \"Vmod_vmod_task_Func.f_per_tsk_val\",\n      \"\",\n      [\n        \"PRIV_TASK\",\n        \"tsk\"\n      ]\n    ]\n  ],\n  [\n    \"$FUNC\",\n    \"per_tsk_opt\",\n    [\n      [\n        \"VOID\"\n      ],\n      \"Vmod_vmod_task_Func.f_per_tsk_opt\",\n      \"struct arg_vmod_task_per_tsk_opt\",\n      [\n        \"PRIV_TASK\",\n        \"tsk\"\n      ],\n      [\n        \"INT\",\n        \"op\",\n        null,\n        null,\n        true\n      ]\n    ]\n  ],\n  [\n    \"$OBJ\",\n    \"PerVcl\",\n    {\n      \"NULL_OK\": false\n    },\n    \"struct vmod_task_PerVcl\",\n    [\n      \"$INIT\",\n      [\n        [\n          \"VOID\"\n        ],\n        \"Vmod_vmod_task_Func.f_PerVcl__init\",\n        \"\",\n        [\n          \"PRIV_VCL\",\n          \"vcl\"\n        ]\n      ]\n    ],\n    [\n      \"$FINI\",\n      [\n        [\n          \"VOID\"\n        ],\n        \"Vmod_vmod_task_Func.f_PerVcl__fini\",\n        \"\"\n      ]\n    ],\n    [\n      \"$METHOD\",\n      \"both\",\n      [\n        [\n          \"VOID\"\n        ],\n        \"Vmod_vmod_task_Func.f_PerVcl_both\",\n        \"\",\n        [\n          \"PRIV_TASK\",\n          \"tsk\"\n        ],\n        [\n          \"PRIV_VCL\",\n          \"vcl\"\n        ]\n      ]\n    ],\n    [\n      \"$METHOD\",\n      \"both_pos\",\n      [\n        [\n          \"VOID\"\n        ],\n        \"Vmod_vmod_task_Func.f_PerVcl_both_pos\",\n        \"\",\n        [\n          \"PRIV_TASK\",\n          \"tsk\"\n        ],\n        [\n          \"PRIV_VCL\",\n          \"vcl\"\n        ],\n        [\n          \"INT\",\n          \"val\"\n        ]\n      ]\n    ],\n    [\n      \"$METHOD\",\n      \"both_opt\",\n      [\n        [\n          \"VOID\"\n        ],\n        \"Vmod_vmod_task_Func.f_PerVcl_both_opt\",\n        \"struct arg_vmod_task_PerVcl_both_opt\",\n        [\n          \"PRIV_TASK\",\n          \"tsk\"\n        ],\n        [\n          \"PRIV_VCL\",\n          \"vcl\"\n        ],\n        [\n          \"INT\",\n          \"opt\",\n          null,\n          null,\n          true\n        ]\n      ]\n    ]\n  ]\n]\n\u{3}";
    }
    use super::{PerTask, PerVcl};
    use varnish::vcl::{Ctx, Event};
    pub fn on_event(evt: Event, ctx: &mut Ctx, vcl: &mut Option<Box<PerVcl>>) {
        panic!()
    }
    pub fn per_vcl_val(vcl: Option<&PerVcl>) {
        panic!()
    }
    pub fn per_vcl_opt(vcl: Option<&PerVcl>, op: Option<i64>) {
        panic!()
    }
    impl PerVcl {
        pub fn new(vcl: &mut Option<Box<PerVcl>>) -> Self {
            panic!()
        }
        pub fn both(&self, tsk: &mut Option<Box<PerTask>>, vcl: Option<&PerVcl>) {
            panic!()
        }
        pub fn both_pos(
            &self,
            tsk: &mut Option<Box<PerTask>>,
            vcl: Option<&PerVcl>,
            val: i64,
        ) {
            panic!()
        }
        pub fn both_opt(
            &self,
            tsk: &mut Option<Box<PerTask>>,
            vcl: Option<&PerVcl>,
            opt: Option<i64>,
        ) {
            panic!()
        }
    }
    pub fn per_tsk_val(tsk: &mut Option<Box<PerTask>>) {
        panic!()
    }
    pub fn per_tsk_opt(tsk: &mut Option<Box<PerTask>>, op: Option<i64>) {
        panic!()
    }
}
