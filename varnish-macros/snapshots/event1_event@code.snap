---
source: varnish-macros/src/tests.rs
snapshot_kind: text
---
mod event {
    #[allow(non_snake_case, unused_imports, unused_qualifications, unused_variables)]
    mod varnish_generated {
        use std::borrow::Cow;
        use std::ffi::{c_char, c_int, c_uint, c_void, CStr};
        use std::ptr::null;
        use varnish::ffi::{
            VCL_BACKEND, VCL_BOOL, VCL_DURATION, VCL_INT, VCL_IP, VCL_PROBE, VCL_REAL,
            VCL_STRING, VCL_VOID, VMOD_ABI_Version, VMOD_PRIV_METHODS_MAGIC, VclEvent,
            vmod_priv, vmod_priv_methods, vrt_ctx,
        };
        use varnish::vcl::{Ctx, IntoVCL, Workspace};
        use super::*;
        unsafe extern "C" fn vmod_c_on_event(
            __ctx: *mut vrt_ctx,
            __vp: *mut vmod_priv,
            __ev: VclEvent,
        ) -> VCL_INT {
            let mut __ctx = Ctx::from_ptr(__ctx);
            let __result = super::on_event(__ev);
            VCL_INT(0)
        }
        #[repr(C)]
        pub struct VmodExports {
            vmod_c_on_event: Option<
                unsafe extern "C" fn(
                    __ctx: *mut vrt_ctx,
                    __vp: *mut vmod_priv,
                    __ev: VclEvent,
                ) -> VCL_INT,
            >,
        }
        pub static VMOD_EXPORTS: VmodExports = VmodExports {
            vmod_c_on_event: Some(vmod_c_on_event),
        };
        #[repr(C)]
        pub struct VmodData {
            vrt_major: c_uint,
            vrt_minor: c_uint,
            file_id: *const c_char,
            name: *const c_char,
            func_name: *const c_char,
            func: *const c_void,
            func_len: c_int,
            proto: *const c_char,
            json: *const c_char,
            abi: *const c_char,
        }
        unsafe impl Sync for VmodData {}
        #[allow(non_upper_case_globals)]
        #[no_mangle]
        pub static Vmod_event_Data: VmodData = VmodData {
            vrt_major: 0,
            vrt_minor: 0,
            file_id: c"0c3074dc38a817d15cef4d516213be340afd42da73c1e822ab6c714f4b9ca7f2"
                .as_ptr(),
            name: c"event".as_ptr(),
            func_name: c"Vmod_vmod_event_Func".as_ptr(),
            func_len: size_of::<VmodExports>() as c_int,
            func: &VMOD_EXPORTS as *const _ as *const c_void,
            abi: VMOD_ABI_Version.as_ptr(),
            json: JSON.as_ptr(),
            proto: null(),
        };
        const JSON: &CStr = c"VMOD_JSON_SPEC\u{2}\n[\n  [\n    \"$VMOD\",\n    \"1.0\",\n    \"event\",\n    \"Vmod_vmod_event_Func\",\n    \"0c3074dc38a817d15cef4d516213be340afd42da73c1e822ab6c714f4b9ca7f2\",\n    \"Varnish (version) (hash)\",\n    \"0\",\n    \"0\"\n  ],\n  [\n    \"$CPROTO\",\n    \"\\nstruct Vmod_vmod_event_Func {\\n  vmod_event_f *f_on_event;\\n};\\n\\nstatic struct Vmod_vmod_event_Func Vmod_vmod_event_Func;\"\n  ],\n  [\n    \"$EVENT\",\n    \"Vmod_vmod_event_Func.f_on_event\"\n  ]\n]\n\u{3}";
    }
    use varnish::vcl::Event;
    /// Event function - the comment is ignored
    pub fn on_event(event: Event) {
        panic!()
    }
}
