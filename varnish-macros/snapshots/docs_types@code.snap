---
source: varnish-macros/src/tests.rs
snapshot_kind: text
---
/// main docs
/// # Big header
/// ## sub header
/// foo bar
mod types {
    /*! Multiline
     * comment per https://github.com/rust-lang/rust/issues/32088
     *
     * The end
     */
    #[allow(non_snake_case, unused_imports, unused_qualifications, unused_variables)]
    mod varnish_generated {
        use std::borrow::Cow;
        use std::ffi::{c_char, c_int, c_uint, c_void, CStr};
        use std::ptr::null;
        use varnish::ffi::{
            VCL_BACKEND, VCL_BOOL, VCL_DURATION, VCL_INT, VCL_IP, VCL_PROBE, VCL_REAL,
            VCL_STRING, VCL_VOID, VMOD_ABI_Version, VMOD_PRIV_METHODS_MAGIC, VclEvent,
            vmod_priv, vmod_priv_methods, vrt_ctx,
        };
        use varnish::vcl::{Ctx, IntoVCL, Workspace};
        use super::*;
        unsafe extern "C" fn vmod_c_with_docs(__ctx: *mut vrt_ctx) {
            let mut __ctx = Ctx::from_ptr(__ctx);
            let __result = super::with_docs();
        }
        unsafe extern "C" fn vmod_c_no_docs(__ctx: *mut vrt_ctx) {
            let mut __ctx = Ctx::from_ptr(__ctx);
            let __result = super::no_docs();
        }
        unsafe extern "C" fn vmod_c_doctest(
            __ctx: *mut vrt_ctx,
            _no_docs: VCL_INT,
            _v: VCL_INT,
        ) {
            let mut __ctx = Ctx::from_ptr(__ctx);
            let __var0: i64 = _no_docs.into();
            let __var1: i64 = _v.into();
            let __result = super::doctest(__var0, __var1);
        }
        unsafe extern "C" fn vmod_c_arg_only(__ctx: *mut vrt_ctx, _v: VCL_INT) {
            let mut __ctx = Ctx::from_ptr(__ctx);
            let __var0: i64 = _v.into();
            let __result = super::arg_only(__var0);
        }
        #[repr(C)]
        struct arg_vmod_types_DocStruct__init {
            valid_cap: c_char,
            cap: VCL_INT,
        }
        unsafe extern "C" fn vmod_c_DocStruct__init(
            __ctx: *mut vrt_ctx,
            __objp: *mut *mut DocStruct,
            __vcl_name: *const c_char,
            __args: *const arg_vmod_types_DocStruct__init,
        ) {
            let mut __ctx = Ctx::from_ptr(__ctx);
            let __args = __args.as_ref().unwrap();
            let __var0: Option<i64> = if __args.valid_cap != 0 {
                __args.cap.into()
            } else {
                None
            };
            let __result = super::DocStruct::new(__var0);
            let __result = Box::new(__result);
            *__objp = Box::into_raw(__result);
        }
        unsafe extern "C" fn vmod_c_DocStruct__fini(__objp: *mut *mut DocStruct) {
            drop(Box::from_raw(*__objp));
            *__objp = ::std::ptr::null_mut();
        }
        unsafe extern "C" fn vmod_c_DocStruct_function(
            __ctx: *mut vrt_ctx,
            __obj: *const super::DocStruct,
            key: VCL_STRING,
        ) {
            let mut __ctx = Ctx::from_ptr(__ctx);
            let __obj = __obj.as_ref().unwrap();
            let __var1: Cow<'_, str> = key.into();
            let __var1 = __var1.as_ref();
            let __result = __obj.function(__var1);
        }
        #[repr(C)]
        pub struct VmodExports {
            vmod_c_with_docs: Option<unsafe extern "C" fn(__ctx: *mut vrt_ctx)>,
            vmod_c_no_docs: Option<unsafe extern "C" fn(__ctx: *mut vrt_ctx)>,
            vmod_c_doctest: Option<
                unsafe extern "C" fn(__ctx: *mut vrt_ctx, _no_docs: VCL_INT, _v: VCL_INT),
            >,
            vmod_c_arg_only: Option<
                unsafe extern "C" fn(__ctx: *mut vrt_ctx, _v: VCL_INT),
            >,
            vmod_c_DocStruct__init: Option<
                unsafe extern "C" fn(
                    __ctx: *mut vrt_ctx,
                    __objp: *mut *mut DocStruct,
                    __vcl_name: *const c_char,
                    __args: *const arg_vmod_types_DocStruct__init,
                ),
            >,
            vmod_c_DocStruct__fini: Option<
                unsafe extern "C" fn(__objp: *mut *mut DocStruct),
            >,
            vmod_c_DocStruct_function: Option<
                unsafe extern "C" fn(
                    __ctx: *mut vrt_ctx,
                    __obj: *const super::DocStruct,
                    key: VCL_STRING,
                ),
            >,
        }
        pub static VMOD_EXPORTS: VmodExports = VmodExports {
            vmod_c_with_docs: Some(vmod_c_with_docs),
            vmod_c_no_docs: Some(vmod_c_no_docs),
            vmod_c_doctest: Some(vmod_c_doctest),
            vmod_c_arg_only: Some(vmod_c_arg_only),
            vmod_c_DocStruct__init: Some(vmod_c_DocStruct__init),
            vmod_c_DocStruct__fini: Some(vmod_c_DocStruct__fini),
            vmod_c_DocStruct_function: Some(vmod_c_DocStruct_function),
        };
        #[repr(C)]
        pub struct VmodData {
            vrt_major: c_uint,
            vrt_minor: c_uint,
            file_id: *const c_char,
            name: *const c_char,
            func_name: *const c_char,
            func: *const c_void,
            func_len: c_int,
            proto: *const c_char,
            json: *const c_char,
            abi: *const c_char,
        }
        unsafe impl Sync for VmodData {}
        #[allow(non_upper_case_globals)]
        #[no_mangle]
        pub static Vmod_types_Data: VmodData = VmodData {
            vrt_major: 0,
            vrt_minor: 0,
            file_id: c"dc6571c10aa0083a83d0ea0cef4845b8dd72a9ec066a8915c151ef01039eccca"
                .as_ptr(),
            name: c"types".as_ptr(),
            func_name: c"Vmod_vmod_types_Func".as_ptr(),
            func_len: size_of::<VmodExports>() as c_int,
            func: &VMOD_EXPORTS as *const _ as *const c_void,
            abi: VMOD_ABI_Version.as_ptr(),
            json: JSON.as_ptr(),
            proto: null(),
        };
        const JSON: &CStr = c"VMOD_JSON_SPEC\u{2}\n[\n  [\n    \"$VMOD\",\n    \"1.0\",\n    \"types\",\n    \"Vmod_vmod_types_Func\",\n    \"dc6571c10aa0083a83d0ea0cef4845b8dd72a9ec066a8915c151ef01039eccca\",\n    \"Varnish (version) (hash)\",\n    \"0\",\n    \"0\"\n  ],\n  [\n    \"$CPROTO\",\n    \"\\nstruct vmod_types_DocStruct;\\n\\ntypedef VCL_VOID td_vmod_types_with_docs(\\n    VRT_CTX\\n);\\n\\ntypedef VCL_VOID td_vmod_types_no_docs(\\n    VRT_CTX\\n);\\n\\ntypedef VCL_VOID td_vmod_types_doctest(\\n    VRT_CTX,\\n    VCL_INT,\\n    VCL_INT\\n);\\n\\ntypedef VCL_VOID td_vmod_types_arg_only(\\n    VRT_CTX,\\n    VCL_INT\\n);\\n\\nstruct arg_vmod_types_DocStruct__init {\\n  char valid_cap;\\n  VCL_INT cap;\\n};\\n\\ntypedef VCL_VOID td_vmod_types_DocStruct__init(\\n    VRT_CTX,\\n    struct vmod_types_DocStruct **,\\n    const char *,\\n    struct arg_vmod_types_DocStruct__init *\\n);\\n\\ntypedef VCL_VOID td_vmod_types_DocStruct__fini(\\n    struct vmod_types_DocStruct **\\n);\\n\\ntypedef VCL_VOID td_vmod_types_DocStruct_function(\\n    VRT_CTX,\\n    struct vmod_types_DocStruct *,\\n    VCL_STRING\\n);\\n\\nstruct Vmod_vmod_types_Func {\\n  td_vmod_types_with_docs *f_with_docs;\\n  td_vmod_types_no_docs *f_no_docs;\\n  td_vmod_types_doctest *f_doctest;\\n  td_vmod_types_arg_only *f_arg_only;\\n  td_vmod_types_DocStruct__init *f_DocStruct__init;\\n  td_vmod_types_DocStruct__fini *f_DocStruct__fini;\\n  td_vmod_types_DocStruct_function *f_DocStruct_function;\\n};\\n\\nstatic struct Vmod_vmod_types_Func Vmod_vmod_types_Func;\"\n  ],\n  [\n    \"$FUNC\",\n    \"with_docs\",\n    [\n      [\n        \"VOID\"\n      ],\n      \"Vmod_vmod_types_Func.f_with_docs\",\n      \"\"\n    ]\n  ],\n  [\n    \"$FUNC\",\n    \"no_docs\",\n    [\n      [\n        \"VOID\"\n      ],\n      \"Vmod_vmod_types_Func.f_no_docs\",\n      \"\"\n    ]\n  ],\n  [\n    \"$FUNC\",\n    \"doctest\",\n    [\n      [\n        \"VOID\"\n      ],\n      \"Vmod_vmod_types_Func.f_doctest\",\n      \"\",\n      [\n        \"INT\",\n        \"_no_docs\"\n      ],\n      [\n        \"INT\",\n        \"_v\"\n      ]\n    ]\n  ],\n  [\n    \"$FUNC\",\n    \"arg_only\",\n    [\n      [\n        \"VOID\"\n      ],\n      \"Vmod_vmod_types_Func.f_arg_only\",\n      \"\",\n      [\n        \"INT\",\n        \"_v\"\n      ]\n    ]\n  ],\n  [\n    \"$OBJ\",\n    \"DocStruct\",\n    {\n      \"NULL_OK\": false\n    },\n    \"struct vmod_types_DocStruct\",\n    [\n      \"$INIT\",\n      [\n        [\n          \"VOID\"\n        ],\n        \"Vmod_vmod_types_Func.f_DocStruct__init\",\n        \"struct arg_vmod_types_DocStruct__init\",\n        [\n          \"INT\",\n          \"cap\",\n          null,\n          null,\n          true\n        ]\n      ]\n    ],\n    [\n      \"$FINI\",\n      [\n        [\n          \"VOID\"\n        ],\n        \"Vmod_vmod_types_Func.f_DocStruct__fini\",\n        \"\"\n      ]\n    ],\n    [\n      \"$METHOD\",\n      \"function\",\n      [\n        [\n          \"VOID\"\n        ],\n        \"Vmod_vmod_types_Func.f_DocStruct_function\",\n        \"\",\n        [\n          \"STRING\",\n          \"key\"\n        ]\n      ]\n    ]\n  ]\n]\n\u{3}";
    }
    /// doctest on a function
    /// with multiple lines
    /// # Big header
    /// ## sub header
    /// * foo
    /// * bar
    pub fn with_docs() {}
    pub fn no_docs() {}
    /// doctest on a function
    pub fn doctest(_no_docs: i64, _v: i64) {}
    pub fn arg_only(_v: i64) {}
    /// doctest for `DocStruct`.
    /// This comment is ignored because we do not handle structs, only impl blocks.
    pub struct DocStruct;
    /// doctest for `DocStruct` implementation
    impl DocStruct {
        /// doctest for `new`
        pub fn new(cap: Option<i64>) -> Self {
            panic!()
        }
        /// doctest for the object function
        #[rustfmt::skip]
        pub fn function(&self, key: &str) {}
    }
}
