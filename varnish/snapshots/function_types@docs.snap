---
source: varnish-macros/src/tests.rs
snapshot_kind: text
---
<!--

   !!!!!!  WARNING: DO NOT EDIT THIS FILE!

   This file was generated from the Varnish VMOD source code.
   It will be automatically updated on each build.

-->
# Varnish Module (VMOD) `types`

```vcl
// Place import statement at the top of your VCL file
// This loads vmod from a standard location
import types;

// Or load vmod from a specific file
import types from "path/to/libtypes.so";
```

### Function `VOID types.to_void()`

### Function `VOID types.to_res_void_err()`

### Function `VOID types.to_res_str_err()`

### Function `VOID types.to_res_box_err()`

### Function `VOID types.type_bool(BOOL _v)`

### Function `VOID types.type_bool_dflt(BOOL _v = 1)`

### Function `VOID types.opt_bool([BOOL _v])`

### Function `BOOL types.to_bool()`

### Function `BOOL types.to_res_bool()`

### Function `VOID types.type_cstr(STRING _v)`

### Function `VOID types.opt_cstr([STRING _v])`

### Function `VOID types.opt_cstr_req(STRING _v)`

### Function `VOID types.type_cstr_dflt(STRING _v = "baz")`

### Function `VOID types.type_cstr_dflt2(STRING _v = "baz")`

### Function `VOID types.opt_cstr_dflt([STRING _v] = "baz")`

### Function `VOID types.opt_cstr_dflt2(STRING _v = "baz")`

### Function `STRING types.to_cstr()`

### Function `STRING types.to_res_cstr()`

### Function `STRING types.to_res_cstr_err()`

### Function `VOID types.type_duration(DURATION _v)`

### Function `VOID types.opt_duration([DURATION _v])`

### Function `DURATION types.to_duration()`

### Function `DURATION types.to_res_duration()`

### Function `VOID types.type_f64(REAL _v)`

### Function `VOID types.type_f64_dflt(REAL _v = 42.3)`

### Function `VOID types.opt_f64([REAL _v])`

### Function `REAL types.to_f64()`

### Function `REAL types.to_res_f64()`

### Function `VOID types.type_i64(INT _v)`

### Function `VOID types.type_i64_dflt(INT _v = 10)`

### Function `VOID types.opt_i64([INT _v])`

### Function `INT types.to_i64()`

### Function `INT types.to_res_i64()`

### Function `VOID types.type_str(STRING _v)`

### Function `VOID types.opt_str([STRING _v])`

### Function `VOID types.opt_str_req(STRING _v)`

### Function `VOID types.type_str_dflt(STRING _v = "baz")`

### Function `VOID types.opt_str_dflt([STRING _v] = "baz")`

### Function `STRING types.to_str()`

### Function `STRING types.to_res_str()`

### Function `STRING types.to_string()`

### Function `STRING types.to_opt_string()`

### Function `STRING types.to_res_string()`

### Function `STRING types.to_res_opt_string()`

### Function `VOID types.type_probe([PROBE _v])`

### Function `VOID types.type_probe_req(PROBE _v)`

### Function `PROBE types.to_probe()`

### Function `PROBE types.to_res_probe()`

### Function `VOID types.type_cow_probe([PROBE _v])`

### Function `VOID types.type_cow_probe_req(PROBE _v)`

### Function `PROBE types.to_cow_probe()`

### Function `PROBE types.to_res_cow_probe()`

### Function `VOID types.type_ip([IP _v])`

### Function `VOID types.type_ip_req(IP _v)`

### Function `IP types.to_ip()`

### Function `IP types.to_res_ip()`

### Function `STRING types.to_vcl_string()`

### Function `STRING types.to_res_vcl_string()`

### Function `STRING types.opt_i64_opt_i64(INT a1, [INT a2], INT a3)`

### Function `VOID types.get_ws_mut()`

### Function `VOID types.get_ws_ref()`
